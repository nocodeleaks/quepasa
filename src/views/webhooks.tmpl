{{ define "content" }}
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
    <!-- Header -->
    <div class="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-3 sm:py-6">
        <div class="flex items-center justify-between gap-2">
          <div class="min-w-0 flex-1">
            <h1 class="text-lg sm:text-xl lg:text-2xl xl:text-3xl font-bold text-gray-900 dark:text-white truncate">WebHooks</h1>
            <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-300 truncate">{{ len .Server.Webhooks }} webhook(s) for <span class="font-semibold">{{ .Server.Wid }}</span></p>
          </div>
          <div class="flex items-center space-x-2 flex-shrink-0">
            <!-- Theme Toggle Button -->
            <button id="themeToggle" onclick="toggleTheme()" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" title="Toggle Dark Mode">
              <i id="themeIcon" class="fas fa-moon text-sm"></i>
            </button>
            <button onclick="showAddWebhookModal()" class="inline-flex items-center px-3 py-2 bg-primary text-white rounded-lg hover:bg-opacity-90 transition-colors text-sm">
              <i class="fas fa-plus mr-1 sm:mr-2"></i>
              <span class="hidden sm:inline">Add WebHook</span>
              <span class="sm:hidden">Add</span>
            </button>
            <a href="/form/account" class="inline-flex items-center px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm">
              <i class="fas fa-arrow-left mr-1 sm:mr-2"></i>
              <span class="sm:hidden">Back</span>
              <span class="hidden sm:inline">Back</span>
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    {{ if .ErrorMessage }}
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 p-4 rounded-r-lg">
          <div class="flex">
            <i class="fas fa-exclamation-triangle text-red-400 mr-3 mt-1"></i>
            <p class="text-red-700 dark:text-red-300">{{ .ErrorMessage }}</p>
          </div>
        </div>
      </div>
    {{ end }}

    <!-- WebHooks List -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="space-y-4">
        {{ range .Server.Webhooks }}
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow">
          <!-- WebHook Header -->
          <div class="px-6 py-4 border-b border-gray-100 dark:border-gray-700 bg-gray-50 dark:bg-gray-700">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div class="flex items-center space-x-3 min-w-0 flex-1">
                <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                  <i class="fas fa-webhook text-white"></i>
                </div>
                <div class="min-w-0 flex-1">
                  <h3 class="font-semibold text-gray-900 dark:text-white truncate">{{ .Url }}</h3>
                  <p class="text-sm text-gray-500 dark:text-gray-400 truncate">Track ID: {{ if .TrackId }}{{ .TrackId }}{{ else }}None{{ end }}</p>
                </div>
              </div>
              
              <div class="flex items-center space-x-2 flex-shrink-0">
                <form method="post" action="/form/delete?token={{ $.Server.Token }}&key=webhook" class="inline">
                  <input name="url" type="hidden" value="{{ .Url }}">
                  <button class="inline-flex items-center px-3 py-2 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-600 text-red-700 dark:text-red-300 text-xs rounded-lg hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors"
                          onclick="return confirm('⚠️ Are you sure you want to delete this webhook?\n\nURL: {{ .Url }}\n{{ if .TrackId }}Track ID: {{ .TrackId }}\n{{ end }}\nThis action cannot be undone!')">
                    <i class="fas fa-trash mr-1 sm:mr-2"></i>
                    <span class="hidden sm:inline">Delete WebHook</span>
                    <span class="sm:hidden">Delete</span>
                  </button>
                </form>
              </div>
            </div>
          </div>

          <!-- WebHook Content -->
          <div class="px-6 py-4">
            <!-- Configuration Toggles -->
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-2 sm:gap-3 mb-4">
              <form method="post" action="/form/toggle?token={{ $.Server.Token }}&key=webhook-forwardinternal">
                <input name="url" type="hidden" value="{{ .Url }}" />
                <button class="w-full px-2 sm:px-3 py-2 text-xs rounded-lg border transition-colors {{ if .ForwardInternal }}bg-blue-100 dark:bg-blue-900/30 border-blue-300 dark:border-blue-600 text-blue-700 dark:text-blue-300{{ else }}bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300{{ end }}">
                  <i class="fas fa-share mr-1"></i>
                  <span class="hidden sm:inline">Forward Internal</span>
                  <span class="sm:hidden">Forward</span>
                </button>
              </form>
              
              <form method="post" action="/form/toggle?token={{ $.Server.Token }}&key=webhook-broadcasts">
                <input name="url" type="hidden" value="{{ .Url }}">
                <button class="w-full px-2 sm:px-3 py-2 text-xs rounded-lg border transition-colors {{ if .IsSetBroadcasts }}{{ if .GetBroadcasts }}bg-blue-100 dark:bg-blue-900/30 border-blue-300 dark:border-blue-600 text-blue-700 dark:text-blue-300{{ else }}bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-600 text-red-700 dark:text-red-300{{ end }}{{ else }}bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300{{ end }}">
                  <i class="fas fa-comment-dots mr-1"></i>
                  <span class="hidden sm:inline">Broadcasts</span>
                  <span class="sm:hidden">Broad</span>
                </button>
              </form>
              
              <form method="post" action="/form/toggle?token={{ $.Server.Token }}&key=webhook-groups">
                <input name="url" type="hidden" value="{{ .Url }}">
                <button class="w-full px-2 sm:px-3 py-2 text-xs rounded-lg border transition-colors {{ if .IsSetGroups }}{{ if .GetGroups }}bg-blue-100 dark:bg-blue-900/30 border-blue-300 dark:border-blue-600 text-blue-700 dark:text-blue-300{{ else }}bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-600 text-red-700 dark:text-red-300{{ end }}{{ else }}bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300{{ end }}">
                  <i class="fas fa-comments mr-1"></i>
                  <span class="hidden sm:inline">Groups</span>
                  <span class="sm:hidden">Groups</span>
                </button>
              </form>
              
              <form method="post" action="/form/toggle?token={{ $.Server.Token }}&key=webhook-readreceipts">
                <input name="url" type="hidden" value="{{ .Url }}">
                <button class="w-full px-2 sm:px-3 py-2 text-xs rounded-lg border transition-colors {{ if .IsSetReadReceipts }}{{ if .GetReadReceipts }}bg-blue-100 dark:bg-blue-900/30 border-blue-300 dark:border-blue-600 text-blue-700 dark:text-blue-300{{ else }}bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-600 text-red-700 dark:text-red-300{{ end }}{{ else }}bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300{{ end }}">
                  <i class="fas fa-check mr-1"></i>
                  <span class="hidden sm:inline">Receipts</span>
                  <span class="sm:hidden">Rcpts</span>
                </button>
              </form>
              
              <form method="post" action="/form/toggle?token={{ $.Server.Token }}&key=webhook-calls">
                <input name="url" type="hidden" value="{{ .Url }}">
                <button class="w-full px-2 sm:px-3 py-2 text-xs rounded-lg border transition-colors {{ if .IsSetCalls }}{{ if .GetCalls }}bg-blue-100 dark:bg-blue-900/30 border-blue-300 dark:border-blue-600 text-blue-700 dark:text-blue-300{{ else }}bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-600 text-red-700 dark:text-red-300{{ end }}{{ else }}bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300{{ end }}">
                  <i class="fas fa-phone mr-1"></i>
                  <span class="hidden sm:inline">Calls</span>
                  <span class="sm:hidden">Calls</span>
                </button>
              </form>
            </div>

            <!-- Extra Information -->
            {{ if .IsSetExtra }}
                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <div id="webhook-extra-{{ .Url | printf "%x" }}" data-raw-extra="{{ .Extra }}">
                    <pre class="text-xs bg-blue-100 dark:bg-blue-900/30 p-3 rounded border dark:border-gray-600 overflow-x-auto"><code class="text-gray-900 dark:text-gray-100">{{ .Extra }}</code></pre>
                  </div>
                </div>
            {{ end }}

            <!-- Failure Information -->
            {{ if .Failure }}
              <div class="mb-4 border border-red-200 dark:border-red-600 rounded-lg overflow-hidden bg-red-50 dark:bg-red-900/20 mt-4">
                <div class="bg-red-100 dark:bg-red-900/30 px-4 py-2 border-b border-red-200 dark:border-red-600">
                  <h4 class="text-sm font-medium text-red-900 dark:text-red-100 flex items-center">
                    <i class="fas fa-exclamation-triangle mr-2"></i>Last Failure
                  </h4>
                </div>
                <div class="p-4">
                  <p class="text-sm text-red-700 dark:text-red-300">{{ .Failure }}</p>
                </div>
              </div>
            {{ end }}
          </div>

          <!-- WebHook Actions -->
        </div>
        {{ end }}

        <!-- Empty State -->
        {{ if eq (len .Server.Webhooks) 0 }}
          <div class="text-center py-12">
            <div class="mx-auto w-24 h-24 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
              <i class="fas fa-webhook text-gray-400 dark:text-gray-500 text-3xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No WebHooks configured</h3>
            <p class="text-gray-600 dark:text-gray-300 mb-6">Start by adding your first webhook to receive events.</p>
            <button onclick="showAddWebhookModal()" class="inline-flex items-center px-4 py-2 bg-primary text-white rounded-lg hover:bg-opacity-90 transition-colors">
              <i class="fas fa-plus mr-2"></i>
              Add Your First WebHook
            </button>
          </div>
        {{ end }}
      </div>
    </div>
  </div>

  <!-- Add WebHook Modal -->
  <div id="addWebhookModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-10 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Add New WebHook</h3>
          <button onclick="hideAddWebhookModal()" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <form method="post" action="/form/webhooks/add?token={{ .Server.Token }}" class="space-y-4" onsubmit="prepareExtraData()">
          <div>
            <label for="webhookUrl" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <i class="fas fa-link mr-1"></i>WebHook URL *
            </label>
            <input 
              type="url" 
              name="url" 
              id="webhookUrl"
              placeholder="https://your-server.com/webhook"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
              required
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">The URL where webhook events will be sent</p>
          </div>
          
          <div>
            <label for="trackId" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <i class="fas fa-tag mr-1"></i>Track ID <span class="text-gray-400">(Optional)</span>
            </label>
            <input 
              type="text" 
              name="trackid" 
              id="trackId"
              placeholder="Custom tracking identifier"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
            >
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Custom identifier for tracking this webhook</p>
          </div>
          
          <!-- Extra Configuration as Form Fields -->
          <div>
            <div class="flex items-center justify-between mb-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                <i class="fas fa-cog mr-1"></i>Extra Configuration <span class="text-gray-400">(Optional)</span>
              </label>
              <button type="button" onclick="addExtraField()" class="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 flex items-center">
                <i class="fas fa-plus mr-1"></i>Add Field
              </button>
            </div>
            
            <div id="extraFields" class="space-y-2 min-h-0">
              <!-- Initial field -->
              <div class="extra-field-row flex space-x-2">
                <input 
                  type="text" 
                  placeholder="Field name (e.g., timeout, retries)"
                  class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-key"
                >
                <input 
                  type="text" 
                  placeholder="Value"
                  class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-value"
                >
                <button type="button" onclick="removeExtraField(this)" class="px-2 py-2 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
                  <i class="fas fa-trash text-xs"></i>
                </button>
              </div>
            </div>
            
            <!-- Hidden field to store the JSON -->
            <input type="hidden" name="extra" id="extraJson">
            
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">
              Add custom configuration fields like headers, timeout, retries, etc.
            </p>
          </div>

          <!-- Advanced Options Toggle -->
          <div class="border-t dark:border-gray-600 pt-4">
            <button type="button" onclick="toggleAdvancedOptions()" class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 flex items-center">
              <i class="fas fa-cog mr-1"></i>
              <span id="advancedToggleText">Show Advanced Options</span>
              <i id="advancedToggleIcon" class="fas fa-chevron-down ml-1"></i>
            </button>
            
            <div id="advancedOptions" class="hidden mt-4 space-y-3 bg-gray-50 dark:bg-gray-700 p-3 rounded">
              <div class="grid grid-cols-2 gap-3">
                <label class="flex items-center space-x-2">
                  <input type="checkbox" name="forwardinternal" class="rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary">
                  <span class="text-sm text-gray-700 dark:text-gray-300">Forward Internal</span>
                </label>
                
                <label class="flex items-center space-x-2">
                  <input type="checkbox" name="broadcasts" class="rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary">
                  <span class="text-sm text-gray-700 dark:text-gray-300">Broadcasts</span>
                </label>
                
                <label class="flex items-center space-x-2">
                  <input type="checkbox" name="groups" class="rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary">
                  <span class="text-sm text-gray-700 dark:text-gray-300">Groups</span>
                </label>
                
                <label class="flex items-center space-x-2">
                  <input type="checkbox" name="readreceipts" class="rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary">
                  <span class="text-sm text-gray-700 dark:text-gray-300">Read Receipts</span>
                </label>
                
                <label class="flex items-center space-x-2">
                  <input type="checkbox" name="calls" class="rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary">
                  <span class="text-sm text-gray-700 dark:text-gray-300">Calls</span>
                </label>
              </div>
            </div>
          </div>
          
          <div class="flex space-x-3 pt-4 border-t dark:border-gray-600">
            <button 
              type="submit" 
              class="flex-1 bg-primary text-white py-2 px-4 rounded-md hover:bg-opacity-90 transition-colors flex items-center justify-center"
            >
              <i class="fas fa-plus mr-2"></i>
              Add WebHook
            </button>
            <button 
              type="button" 
              onclick="hideAddWebhookModal()"
              class="flex-1 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-200 py-2 px-4 rounded-md hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <style>
    /* JSON Code Editor Styling - Base Styles */
    .json-code-editor {
      font-family: 'Fira Code', 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      /* Light mode styles */
      background: #f8f9fa;
      color: #495057;
      border: 1px solid #dee2e6;
    }
    
    .json-code-header {
      padding: 8px 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      /* Light mode styles */
      background: #e9ecef;
      border-bottom: 1px solid #dee2e6;
    }
    
    .json-code-title {
      font-size: 12px;
      font-weight: 500;
      display: flex;
      align-items: center;
      /* Light mode styles */
      color: #495057;
    }
    
    .json-code-actions {
      display: flex;
      gap: 8px;
    }
    
    .json-code-button {
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 4px;
      transition: background-color 0.2s;
      /* Light mode styles */
      background: #007bff;
      color: white;
    }
    
    .json-code-button:hover {
      /* Light mode styles */
      background: #0056b3;
    }
    
    .json-code-button.success {
      background: #28a745;
    }
    
    .json-code-content {
      position: relative;
      max-height: 500px;
      overflow: auto;
    }
    
    .json-code-lines {
      display: flex;
      font-size: 13px;
      line-height: 1.5;
    }
    
    .json-line-numbers {
      padding: 12px 8px;
      text-align: right;
      user-select: none;
      min-width: 40px;
      font-size: 12px;
      /* Light mode styles */
      background: #f1f3f4;
      color: #6c757d;
      border-right: 1px solid #dee2e6;
    }
    
    .json-line-numbers .line-number {
      display: block;
      height: 19.5px;
      line-height: 19.5px;
    }
    
    .json-code-text {
      flex: 1;
      padding: 12px;
      white-space: pre;
      overflow: visible;
      font-size: 13px;
      line-height: 1.5;
      /* Light mode styles */
      background: #ffffff;
      color: #212529;
    }

    /* Dark Mode JSON Code Editor Overrides */
    .dark .json-code-editor {
      background: #0d1117;
      color: #e6edf3;
      border: 1px solid #30363d;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    
    .dark .json-code-header {
      background: #161b22;
      border-bottom-color: #30363d;
    }
    
    .dark .json-code-title {
      color: #f0f6fc;
    }
    
    .dark .json-code-button {
      background: #238636;
      color: #ffffff;
    }
    
    .dark .json-code-button:hover {
      background: #2ea043;
    }
    
    .dark .json-code-button.success {
      background: #1a7f37;
    }
    
    .dark .json-line-numbers {
      background: #161b22;
      color: #7d8590;
      border-right-color: #30363d;
    }
    
    .dark .json-code-text {
      background: #0d1117;
      color: #e6edf3;
    }
    
    /* JSON Syntax Highlighting - Light Mode */
    .json-key { 
      color: #d73a49; 
      font-weight: normal;
    }
    .json-string { 
      color: #032f62; 
    }
    .json-number { 
      color: #005cc5; 
    }
    .json-boolean { 
      color: #e36209; 
      font-weight: bold;
    }
    .json-null { 
      color: #e36209; 
      font-style: italic;
    }
    .json-punctuation {
      color: #24292e;
    }

    /* JSON Syntax Highlighting - Dark Mode */
    .dark .json-key { 
      color: #79c0ff; 
      font-weight: normal;
    }
    .dark .json-string { 
      color: #a5d6ff; 
    }
    .dark .json-number { 
      color: #79c0ff; 
    }
    .dark .json-boolean { 
      color: #ff7b72; 
      font-weight: bold;
    }
    .dark .json-null { 
      color: #ff7b72; 
      font-style: italic;
    }
    .dark .json-punctuation {
      color: #e6edf3;
    }

    /* Scrollbar styling for JSON editor */
    .json-code-content::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    .json-code-content::-webkit-scrollbar-track {
      background: #f1f1f1;
    }
    
    .dark .json-code-content::-webkit-scrollbar-track {
      background: #161b22;
    }
    
    .json-code-content::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 4px;
    }
    
    .dark .json-code-content::-webkit-scrollbar-thumb {
      background: #6e7681;
      border-radius: 4px;
    }
    
    .json-code-content::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8;
    }
    
    .dark .json-code-content::-webkit-scrollbar-thumb:hover {
      background: #8b949e;
    }

    /* Enhanced pre/code styling for webhook extras */
    pre {
      background: #f8f9fa !important;
      color: #212529 !important;
      border: 1px solid #dee2e6 !important;
    }
    
    .dark pre {
      background: #0d1117 !important;
      color: #e6edf3 !important;
      border: 1px solid #30363d !important;
    }
    
    pre code {
      color: inherit !important;
      background: transparent !important;
    }
    
    /* Fallback styling for non-JSON content */
    .bg-blue-100 {
      background-color: rgba(59, 130, 246, 0.1) !important;
    }
    
    .dark .bg-blue-100 {
      background-color: rgba(59, 130, 246, 0.15) !important;
    }

    .dark .bg-blue-900\/30 {
      background-color: rgba(30, 58, 138, 0.3) !important;
    }

    /* Webhook specific mobile styles */
    @media (max-width: 640px) {
      .webhook-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
      }
      
      .webhook-button {
        padding: 0.5rem 0.25rem;
        font-size: 0.75rem;
      }
      
      .webhook-url {
        font-size: 0.875rem;
        line-height: 1.25rem;
      }
      
      .json-code-editor {
        font-size: 11px;
      }
      
      .json-code-header {
        padding: 6px 8px;
      }
      
      .json-code-title {
        font-size: 11px;
      }
      
      .json-code-button {
        padding: 3px 6px;
        font-size: 10px;
      }
      
      .json-line-numbers {
        padding: 8px 6px;
        min-width: 30px;
        font-size: 11px;
      }
      
      .json-code-text {
        padding: 8px;
        font-size: 11px;
      }
    }
    
    /* Ensure text truncation works properly */
    .truncate-url {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      max-width: 100%;
    }
  </style>

  <script>
    // Theme management
    function initializeTheme() {
      const savedTheme = localStorage.getItem('theme');
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      const currentTheme = savedTheme || systemTheme;
      
      applyTheme(currentTheme);
    }
    
    function applyTheme(theme) {
      const html = document.documentElement;
      const themeIcon = document.getElementById('themeIcon');
      
      if (theme === 'dark') {
        html.classList.add('dark');
        if (themeIcon) themeIcon.className = 'fas fa-sun text-sm';
      } else {
        html.classList.remove('dark');
        if (themeIcon) themeIcon.className = 'fas fa-moon text-sm';
      }
      
      localStorage.setItem('theme', theme);
    }
    
    function toggleTheme() {
      const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      applyTheme(newTheme);
    }

    function showAddWebhookModal() {
      document.getElementById('addWebhookModal').classList.remove('hidden');
      // Reset form
      document.querySelector('#addWebhookModal form').reset();
      resetExtraFields();
      hideAdvancedOptions();
    }
    
    function hideAddWebhookModal() {
      document.getElementById('addWebhookModal').classList.add('hidden');
    }
    
    function toggleAdvancedOptions() {
      const options = document.getElementById('advancedOptions');
      const text = document.getElementById('advancedToggleText');
      const icon = document.getElementById('advancedToggleIcon');
      
      if (options.classList.contains('hidden')) {
        options.classList.remove('hidden');
        text.textContent = 'Hide Advanced Options';
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-up');
      } else {
        hideAdvancedOptions();
      }
    }
    
    function hideAdvancedOptions() {
      const options = document.getElementById('advancedOptions');
      const text = document.getElementById('advancedToggleText');
      const icon = document.getElementById('advancedToggleIcon');
      
      options.classList.add('hidden');
      text.textContent = 'Show Advanced Options';
      icon.classList.remove('fa-chevron-up');
      icon.classList.add('fa-chevron-down');
    }
    
    // Extra fields management
    function addExtraField(key = '', value = '') {
      const container = document.getElementById('extraFields');
      const fieldRow = document.createElement('div');
      fieldRow.className = 'extra-field-row flex space-x-2';
      fieldRow.innerHTML = `
        <input 
          type="text" 
          placeholder="Field name (e.g., timeout, retries)"
          value="${key}"
          class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-key"
        >
        <input 
          type="text" 
          placeholder="Value"
          value="${value}"
          class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-value"
        >
        <button type="button" onclick="removeExtraField(this)" class="px-2 py-2 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
          <i class="fas fa-trash text-xs"></i>
        </button>
      `;
      container.appendChild(fieldRow);
    }
    
    function removeExtraField(button) {
      const container = document.getElementById('extraFields');
      const fieldRow = button.closest('.extra-field-row');
      
      // Always keep at least one field
      if (container.children.length > 1) {
        fieldRow.remove();
      } else {
        // Clear the last field instead of removing it
        fieldRow.querySelector('.extra-key').value = '';
        fieldRow.querySelector('.extra-value').value = '';
      }
    }
    
    function resetExtraFields() {
      const container = document.getElementById('extraFields');
      container.innerHTML = `
        <div class="extra-field-row flex space-x-2">
          <input 
            type="text" 
            placeholder="Field name (e.g., timeout, retries)"
            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-key"
          >
          <input 
            type="text" 
            placeholder="Value"
            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md text-sm extra-value"
          >
          <button type="button" onclick="removeExtraField(this)" class="px-2 py-2 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
            <i class="fas fa-trash text-xs"></i>
          </button>
        </div>
      `;
    }
    
    function addSuggestedField(key, value) {
      // Check if field already exists
      const existingKeys = Array.from(document.querySelectorAll('.extra-key')).map(input => input.value.toLowerCase());
      if (existingKeys.includes(key.toLowerCase())) {
        alert(`Field "${key}" already exists!`);
        return;
      }
      
      // Find first empty field or add new one
      const emptyField = Array.from(document.querySelectorAll('.extra-field-row')).find(row => {
        const keyInput = row.querySelector('.extra-key');
        const valueInput = row.querySelector('.extra-value');
        return !keyInput.value && !valueInput.value;
      });
      
      if (emptyField) {
        emptyField.querySelector('.extra-key').value = key;
        emptyField.querySelector('.extra-value').value = value;
      } else {
        addExtraField(key, value);
      }
    }
    
    function prepareExtraData() {
      const extraFields = document.querySelectorAll('.extra-field-row');
      const extraData = {};
      
      extraFields.forEach(row => {
        const key = row.querySelector('.extra-key').value.trim();
        const value = row.querySelector('.extra-value').value.trim();
        
        if (key && value) {
          // Try to parse value as number or boolean, otherwise keep as string
          let parsedValue = value;
          if (value.toLowerCase() === 'true') {
            parsedValue = true;
          } else if (value.toLowerCase() === 'false') {
            parsedValue = false;
          } else if (!isNaN(value) && !isNaN(parseFloat(value))) {
            parsedValue = parseFloat(value);
          }
          
          extraData[key] = parsedValue;
        }
      });
      
      // Set the JSON in the hidden field
      document.getElementById('extraJson').value = Object.keys(extraData).length > 0 ? JSON.stringify(extraData) : '';
    }
    
    // JSON processing functions (similar to receive.tmpl)
    function isValidJSON(str) {
      if (!str || typeof str !== 'string') return false;
      str = str.trim();
      
      if (str.startsWith('map[...]') || (str.includes(':') && !str.startsWith('{') && !str.startsWith('['))) {
        return false;
      }
      
      if (!str.startsWith('{') && !str.startsWith('[')) return false;
      
      try {
        JSON.parse(str);
        return true;
      } catch (e) {
        return false;
      }
    }

    function beautifyJSON(jsonString) {
      try {
        const parsed = JSON.parse(jsonString);
        return JSON.stringify(parsed, null, 2);
      } catch (e) {
        return jsonString;
      }
    }

    function highlightJSON(jsonString) {
      return jsonString
        .replace(/("([^"\\]|\\.)*")\s*:/g, '<span class="json-key">$1</span>:')
        .replace(/:\s*("([^"\\]|\\.)*")/g, ': <span class="json-string">$1</span>')
        .replace(/:\s*(-?\d+\.?\d*)/g, ': <span class="json-number">$1</span>')
        .replace(/:\s*(true|false)/g, ': <span class="json-boolean">$1</span>')
        .replace(/:\s*(null)/g, ': <span class="json-null">$1</span>')
        .replace(/([{}[\],])/g, '<span class="json-punctuation">$1</span>');
    }

    function createJSONCodeEditor(jsonString, elementId, title = 'JSON') {
      const beautified = beautifyJSON(jsonString);
      const lines = beautified.split('\n');
      const highlighted = highlightJSON(beautified);
      
      const lineNumbers = lines.map((_, index) => 
        `<span class="line-number">${index + 1}</span>`
      ).join('');
      
      return `
        <div class="json-code-editor">
          <div class="json-code-header">
            <div class="json-code-title">
              <i class="fas fa-code" style="margin-right: 6px;"></i>
              ${title} (${lines.length} lines)
            </div>
            <div class="json-code-actions">
              <button class="json-code-button" onclick="toggleJSONView('${elementId}')" title="Toggle Raw/Formatted">
                <i class="fas fa-eye"></i>
                <span class="view-mode">Formatted</span>
              </button>
              <button class="json-code-button" onclick="copyJSONCode('${elementId}')" title="Copy to Clipboard">
                <i class="fas fa-copy"></i>
                Copy
              </button>
            </div>
          </div>
          <div class="json-code-content">
            <div class="json-code-lines">
              <div class="json-line-numbers">${lineNumbers}</div>
              <div class="json-code-text formatted-view">${highlighted}</div>
              <div class="json-code-text raw-view" style="display: none;">${escapeHtml(jsonString)}</div>
            </div>
          </div>
        </div>
      `;
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function toggleJSONView(elementId) {
      const container = document.getElementById(elementId);
      const formattedView = container.querySelector('.formatted-view');
      const rawView = container.querySelector('.raw-view');
      const viewModeSpan = container.querySelector('.view-mode');
      
      if (formattedView.style.display === 'none') {
        formattedView.style.display = 'block';
        rawView.style.display = 'none';
        viewModeSpan.textContent = 'Formatted';
      } else {
        formattedView.style.display = 'none';
        rawView.style.display = 'block';
        viewModeSpan.textContent = 'Raw';
      }
    }

    function copyJSONCode(elementId) {
      const container = document.getElementById(elementId);
      const formattedView = container.querySelector('.formatted-view');
      const rawView = container.querySelector('.raw-view');
      
      const textToCopy = formattedView.style.display === 'none' 
        ? rawView.textContent 
        : formattedView.textContent;
      
      navigator.clipboard.writeText(textToCopy).then(() => {
        const button = container.querySelector('.json-code-button[onclick*="copyJSONCode"]');
        const originalHTML = button.innerHTML;
        button.innerHTML = '<i class="fas fa-check"></i> Copied!';
        button.classList.add('success');
        
        setTimeout(() => {
          button.innerHTML = originalHTML;
          button.classList.remove('success');
        }, 2000);
      }).catch(err => {
        const textArea = document.createElement('textarea');
        textArea.value = textToCopy;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
      });
    }

    // Convert Go map to JSON with proper formatting
    function convertToJSONWithPlaceholders(mapData, elementId) {
      const fields = parseGoMapFields(mapData);
      
      if (fields.length === 0) {
        return `<pre class="text-xs bg-blue-100 p-3 rounded border overflow-x-auto"><code>${escapeHtml(mapData)}</code></pre>`;
      }
      
      const jsonObject = {};
      fields.forEach(field => {
        let value = field.value;
        
        // Remove quotes if they wrap the entire value
        if (value.startsWith('"') && value.endsWith('"')) {
          value = value.slice(1, -1);
        }
        
        // Try to parse as appropriate type
        if (value.toLowerCase() === 'true') {
          jsonObject[field.key] = true;
        } else if (value.toLowerCase() === 'false') {
          jsonObject[field.key] = false;
        } else if (value.toLowerCase() === 'null') {
          jsonObject[field.key] = null;
        } else if (!isNaN(value) && !isNaN(parseFloat(value)) && value.trim() !== '') {
          jsonObject[field.key] = parseFloat(value);
        } else {
          jsonObject[field.key] = value;
        }
      });
      
      const jsonString = JSON.stringify(jsonObject, null, 2);
      return createJSONCodeEditor(jsonString, elementId, 'Extra Configuration (JSON)');
    }

    // Parse Go map fields from string representation
    function parseGoMapFields(mapStr) {
      const fields = [];
      
      try {
        
        // Extract content between square brackets - fix the regex
        const mapContentMatch = mapStr.match(/^map\[[^\]]*\](.*)$/);
        let cleaned;
        
        if (mapContentMatch) {
          cleaned = mapContentMatch[1].trim();
        } else {
          // Fallback: try to find content after the first ]
          const bracketIndex = mapStr.indexOf(']');
          if (bracketIndex !== -1) {
            cleaned = mapStr.substring(bracketIndex + 1).trim();
          } else {
            cleaned = mapStr.trim();
          }
        }
        
        
        // If cleaned is empty, the content is inside the brackets
        if (!cleaned && mapStr.includes('[') && mapStr.includes(']')) {
          const startBracket = mapStr.indexOf('[');
          const endBracket = mapStr.lastIndexOf(']');
          if (startBracket !== -1 && endBracket !== -1 && endBracket > startBracket) {
            cleaned = mapStr.substring(startBracket + 1, endBracket).trim();
          }
        }
        
        if (!cleaned) {
          return fields;
        }
        
        // Split by spaces and look for key:value patterns
        const parts = cleaned.split(/\s+/);

        
        for (let i = 0; i < parts.length; i++) {
          const part = parts[i];
          if (part.includes(':')) {
            const colonIndex = part.indexOf(':');
            const key = part.substring(0, colonIndex);
            let value = part.substring(colonIndex + 1);
            
            // If value is empty or looks incomplete, check next parts
            if (!value || (value && i + 1 < parts.length && !parts[i + 1].includes(':'))) {
              // Collect consecutive parts that don't contain ':' as part of the value
              const valueParts = [value];
              let j = i + 1;
              while (j < parts.length && !parts[j].includes(':')) {
                valueParts.push(parts[j]);
                j++;
              }
              value = valueParts.join(' ').trim();
              i = j - 1; // Skip the parts we've consumed
            }
            
            if (key && value) {
              fields.push({
                key: key,
                value: value
              });
            }
          }
        }
        

        
      } catch (e) {

      }
      
      return fields;
    }

    // Check if string looks like a Go map
    function isGoMap(str) {
      return str.includes('map[') && str.includes(':');
    }

    // Process webhook extra configurations
    function processWebhookExtras() {
      const extraElements = document.querySelectorAll('[id^="webhook-extra-"]');
      
      extraElements.forEach(element => {
        const rawExtra = element.getAttribute('data-raw-extra');
        
        if (rawExtra) {
          if (isGoMap(rawExtra)) {

            const jsonWithFormatting = convertToJSONWithPlaceholders(rawExtra, element.id);
            element.innerHTML = jsonWithFormatting;
          } else if (isValidJSON(rawExtra)) {

            const editorHTML = createJSONCodeEditor(rawExtra, element.id, 'Extra Configuration');
            element.innerHTML = editorHTML;
          }
        }
      });
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      initializeTheme();
      processWebhookExtras();
    });
  </script>
{{ end }}